- name: create user
  user:
    name: kafka
    groups: sudo
    password: kafka
  tags: kafka

- name: Setting internal variable
  set_fact:
    kafka_name: kafka_{{ kafka.scala_version }}-{{ kafka.version }}
  tags: kafka

- name: Setting internal variable
  set_fact:
    kafka_dir: "{{ kafka.install_dir }}/{{ kafka_name }}"
  tags: kafka

- name: check if tar has been downloaded
  command: test -f /tmp/{{ kafka_name }}.tgz
  register: kafka_tar_downloaded
  failed_when: kafka_tar_downloaded.rc not in [0, 1]
  changed_when: False
  tags: kafka

- name: Ensure Kafka tar is downloaded
  get_url:
    url: "{{ kafka.mirror }}/kafka/{{ kafka.version }}/{{ kafka_name }}.tgz"
    dest: /tmp
  tags: kafka
  when: kafka_tar_downloaded.rc == 1

- name: Ensure tar is extracted
  command: tar xzf /tmp/{{ kafka_name }}.tgz chdir="{{ kafka.install_dir }}"
  tags: kafka

# Config and start Kafka
- name: Ensures data dir {{ kafka.data_dir }} exists
  file:
    path: "{{ kafka.data_dir }}"
    state: directory
    owner: kafka
    group: kafka
  tags: kafka

- name: Copy real config
  template:
    src: kafka-properties.j2
    dest: "{{ kafka_dir }}/config/server.properties"
  tags: kafka

- name : Create log directory
  file: path="{{ kafka.log_dir }}" state=directory owner=kafka group=kafka 
  tags: kafka

- name: Stop any kafka daemon 
  shell: "{{ kafka.stop_script }} > /dev/null" 
  ignore_errors: yes
  tags: kafka

- name: Run kafka as a daemon 
  shell: "{{ kafka.start_script }}"
  tags: kafka

# - name: Create a kafka topic for test
#   shell: "{{ kafka.kafka_producer }}"
#   tags: kafka 

# - name: Consume kafka topic for test
#   shell: "{{kafka.kafka_consumer}}"
#   tags: kafka


